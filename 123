#Задача8
def readandcount(text):
    with open(text, 'r') as fl:
        text = fl.read()
        diction = {}
#удаляем все тире11
        for i in text:
            if i == '—':
                n = text.find(i)
                text = text[:n]+text[n+1:]
#удаляем все точки
        for i in text:
            if i == '.':
                n = text.find(i)
                text = text[:n]+text[n+1:]
#удаляем все восклицательные знаки
        for i in text:
            if i == '!':
                n = text.find(i)
                text = text[:n]+text[n+1:]
#удаляем все запятые
        for i in text:
            if i == ',':
                n = text.find(i)
                text = text[:n]+text[n+1:]
#удаляем все двоеточия
        for i in text:
            if i == ':':
                n = text.find(i)
                text = text[:n]+text[n+1:]
#удаляем все точки с запятыми
        for i in text:
            if i == ';':
                n = text.find(i)
                text = text[:n]+text[n+1:]
#удаляем все знаки вопроса
        for i in text:
            if i == '?':
                n = text.find(i)
                text = text[:n]+text[n+1:]
        text = text.lower()
        lsttext = text.split()
        for word in lsttext:
            diction.setdefault(word, 0)
            diction[word] += 1
        diction1 = diction.items()
        lst = []
        for values,key in diction1:
            lst.append((key,values))
        lst.sort(reverse = True)
        for key,values in lst:
            x = print ('Слово', values, 'встретилось в тексте', key, 'раз(а).')
    return (x)
readandcount('problem_8_text.txt') 

def function_5(matrix):
    reversedmat = map(list, zip(*matrix))
    reversedmat = sorted(reversedmat, key = sum)
    back = list(map(list, zip(*reversedmat)))
    return back
assert function_5([[5, 0, 1], [1, 1, 1], [2, 2, 0]]) == [[1, 0, 5], [1, 1, 1], [0, 2, 2]]
assert function_5([[-1, -3, -5], [1, 1, 1], [5, 6, 7]]) == [[-5, -3, -1], [1, 1, 1], [7, 6, 5]]
assert function_5([[-3, 0, 7, 2], [0, 5, 3, 2], [1, 0, 0, 10], [6, 5, -2, 9]]) == [[-3, 7, 0, 2], [0, 3, 5, 2], [1, 0, 0, 10], [6, -2, 5, 9]]
